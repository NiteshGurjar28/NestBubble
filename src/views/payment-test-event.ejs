<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Payment Test</title>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://js.stripe.com/v3/"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>
<body>
  <h2>Test Event Booking Payment</h2>

  <form id="paymentForm">
    <label>Event ID:</label><br>
    <input type="text" id="eventId" value="<%= eventId %>" /><br><br>

    <label>Number of Attendees:</label><br>
    <input type="number" id="attendees" value="1" /><br><br>

    <label>Payment Type:</label><br>
    <select id="paymentType">
      <option value="stripe">Stripe</option>
      <option value="razorpay">Razorpay</option>
    </select><br><br>

    <!-- Stripe card input (hidden unless Stripe is selected) -->
    <div id="card-element-container" style="display:none;">
      <label>Card Details:</label>
      <div id="card-element"></div>
    </div>
    <br>

    <button type="button" onclick="startPayment()">Start Payment</button>
  </form>

  <div id="result"></div>

  <script>
    let stripe, cardElement;

    // Initialize Stripe
    stripe = Stripe("<%= STRIPE_PUBLISHABLE_KEY %>");
    const elements = stripe.elements();
    cardElement = elements.create('card');
    cardElement.mount('#card-element');

    // Show card input only when Stripe selected
    document.getElementById('paymentType').addEventListener('change', (e) => {
      document.getElementById('card-element-container').style.display = 
        e.target.value === 'stripe' ? 'block' : 'none';
    });

    async function startPayment() {
      const eventId = document.getElementById('eventId').value;
      const attendees = document.getElementById('attendees').value;
      const paymentType = document.getElementById('paymentType').value;

      try {
        // Call your createPaymentEventBookingLink API
        const response = await axios.post('/api/v1/guest/createPaymentEventBookingLink', {
          eventId: eventId,
          numberOfAttendees: Number(attendees),
          paymentType: paymentType
        });

        document.getElementById('result').innerText = JSON.stringify(response.data, null, 2);

        const data = response.data.data;

        if (paymentType === "stripe") {
          const { clientSecret, paymentRecordId } = data;

          // Confirm payment with card element
          const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
            payment_method: {
              card: cardElement
            }
          });

          if (error) {
            alert("Stripe Payment Failed: " + error.message);
          } else if (paymentIntent.status === "succeeded") {
            // Call booking confirm API
            await axios.post('/api/v1/guest/bookEventWithPayment', { paymentRecordId });
            alert("Stripe booking success!");
          }

        } else if (paymentType === "razorpay") {
          const { orderId, razorpayKeyId, paymentRecordId, amount } = data;
          var options = {
            key: razorpayKeyId,
            amount: amount,
            currency: "INR",
            name: "Test Event Booking",
            description: "Event Payment",
            order_id: orderId,
            handler: async function (response) {
              // Call booking confirm API
              await axios.post('/api/v1/guest/bookEventWithPayment', {
                paymentRecordId
              });
              alert("Razorpay booking success!");
            }
          };
          var rzp = new Razorpay(options);
          rzp.open();
        }

      } catch (err) {
        console.error(err);
        alert("Error: " + err.message);
      }
    }
  </script>
</body>
</html>
